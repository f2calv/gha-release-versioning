name: gha-release-versioning
author: Alex Vincent
description: Determines a semantic version for the current commit, optionally tags the repo with this version and creates a release.

inputs:
  GITHUB_TOKEN:
    description: e.g. USD{{ secrets.GITHUB_TOKEN }}
    required: true
  semVer:
    description: Pass in an externally generated semantic version, if empty then uses GitVersion.
    required: false
    type: string
    default: ''
  tag-prefix:
    description: Prefix the semver, e.g. 1.0.1 or v1.0.1
    required: false
    type: string
    default: v
  move-major-tag:
    description: Create and/or move major version tag, e.g. when creating v1.0.2 then move v1 tag up from the v1.0.1 commit.
    required: false
    type: boolean
    default: true
  tag-and-release:
    description: Sets a Git tag and creates a corresponding release.
    required: false
    type: boolean
    default: true
  gv-config:
    description: Configuration filename that GitVersion will use.
    type: string
    default: GitVersion.yml
  gv-source:
    description: Choose an installation source for GitVersion, options include container, dotnet & action.
    type: string
    default: container

outputs:
  semVer:
    description: e.g. 1.2.301
    value: ${{ steps.semver_output.outputs.semVer }}
  fullSemVer:
    description: e.g. 1.2.301-feature-my-feature.12
    value: ${{ steps.semver_output.outputs.fullSemVer }}
  major:
    description: e.g. 1
    value: ${{ steps.semver_output.outputs.major }}
  minor:
    description: e.g. 2
    value: ${{ steps.semver_output.outputs.minor }}
  patch:
    description: e.g. 301
    value: ${{ steps.semver_output.outputs.patch }}

runs:
  using: composite
  steps:

    - name: gitversion config check
      shell: bash
      if: inputs.semVer == '' && inputs.gv-config != ''
      run: |
        FILE=${{ inputs.gv-config }}
        if [[ -f "$FILE" ]]; then
          echo "$FILE exists"
        else
          echo "::error file=${{ inputs.gv-config }}::Repository versioning is managed by GitVersion, '$FILE' is therefore required!"
        fi

    - name: gitversion action (1 of 2)
      uses: gittools/actions/gitversion/setup@v1
      if: inputs.semVer == '' && inputs.gv-source == 'action'
      with:
        versionSpec: 5.x

    - name: gitversion action (2 of 2)
      uses: gittools/actions/gitversion/execute@v1
      if: inputs.semVer == '' && inputs.gv-source == 'action'
      id: gitversion_action
      with:
        useConfigFile: true
        additionalArguments: /nofetch

    - name: gitversion dotnet (1 of 2)
      uses: actions/setup-dotnet@v4
      if: inputs.semVer == '' && inputs.gv-source == 'dotnet'
      with:
        dotnet-version: 8.0.x

    - name: gitversion dotnet (2 of 2)
      shell: bash
      if: inputs.semVer == '' && inputs.gv-source == 'dotnet'
      run: |
        dotnet tool update -g GitVersion.Tool
        $HOME/.dotnet/tools/dotnet-gitversion ${{ github.workspace }} /nofetch > GitVersion.json
        cat GitVersion.json

    - name: gitversion container (1 of 1)
      shell: bash
      if: inputs.semVer == '' && inputs.gv-source == 'container'
      run: |
        git branch
        docker run -v "$(pwd):/repo" gittools/gitversion /repo /nofetch > GitVersion.json
        # docker run --name fred --entrypoint "" -v "$(pwd):/repo" gittools/gitversion /bin/bash -c "git config --global --add safe.directory '*'; /tools/dotnet-gitversion /repo"
        # # docker run --name fred -v "$(pwd):/repo" gittools/gitversion /repo /nofetch
        # echo "test1"
        # docker logs fred
        # echo "test2"
        # #docker run --rm -v "$(pwd):/repo" gittools/gitversion /repo /nofetch > GitVersion.json
        # docker run --entrypoint "" -v "$(pwd):/repo" gittools/gitversion /bin/bash -c "git config --global --add safe.directory '*'; /tools/dotnet-gitversion /repo" > GitVersion.json
        cat GitVersion.json

    - name: semver select
      shell: bash
      run: |
        SEMVER=${{ inputs.semVer }}

        if [[ -z "$SEMVER" ]]; then
          if [[ "${{ inputs.gv-source }}" == "action" ]]; then
            SEMVER=${{ steps.gitversion_action.outputs.semVer }}
            FULLSEMVER=${{ steps.gitversion_action.outputs.fullSemVer }}
            MAJOR=${{ steps.gitversion_action.outputs.major }}
            MINOR=${{ steps.gitversion_action.outputs.minor }}
            PATCH=${{ steps.gitversion_action.outputs.patch }}
          else
            SEMVER=$(jq '.SemVer' GitVersion.json | xargs)
            FULLSEMVER=$(jq '.FullSemVer' GitVersion.json | xargs)
            MAJOR=$(jq '.Major' GitVersion.json | xargs)
            MINOR=$(jq '.Minor' GitVersion.json | xargs)
            PATCH=$(jq '.Patch' GitVersion.json | xargs)
          fi
        else
          #https://gist.github.com/bitmvr/9ed42e1cc2aac799b123de9fdc59b016
          FULLSEMVER=${{ inputs.semVer }}
          VERSION="$1"
          VERSION="${VERSION#[vV]}"
          MAJOR="${VERSION%%\.*}"
          MINOR="${VERSION#*.}"
          MINOR="${MINOR%.*}"
          PATCH="${VERSION##*.}"
        fi

        echo "SEMVER=$SEMVER" >> $GITHUB_ENV
        echo "FULLSEMVER=$FULLSEMVER" >> $GITHUB_ENV
        echo "MAJOR=$MAJOR" >> $GITHUB_ENV
        echo "MINOR=$MINOR" >> $GITHUB_ENV
        echo "PATCH=$PATCH" >> $GITHUB_ENV

    - name: semver output
      shell: bash
      id: semver_output
      run: |
        echo "semVer=$(echo $SEMVER)" >> $GITHUB_OUTPUT
        echo "fullSemVer=$(echo $FULLSEMVER)" >> $GITHUB_OUTPUT
        echo "major=$(echo $MAJOR)" >> $GITHUB_OUTPUT
        echo "minor=$(echo $MINOR)" >> $GITHUB_OUTPUT
        echo "patch=$(echo $PATCH)" >> $GITHUB_OUTPUT

    - uses: f2calv/gha-check-release-exists@v2
      id: check-release-exists
      if: inputs.tag-and-release == 'true'
      with:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        ReleaseName: $SEMVER

    - name: create release
      uses: softprops/action-gh-release@v2
      if: |
        steps.check-release-exists.outputs.ReleaseExists == 'false'
          && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch))
          && inputs.tag-and-release == 'true'
      with:
        tag_name: ${{ inputs.tag-prefix }}${{ env.FULLSEMVER }}
        name: ${{ env.FULLSEMVER }}

    - name: git apply/move major tag
      shell: bash
      if: |
        steps.check-release-exists.outputs.ReleaseExists == 'false'
          && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
          && inputs.move-major-tag == 'true'
          && inputs.tag-and-release == 'true'
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"

        TAG=${{ inputs.tag-prefix }}$MAJOR
        echo "TAG=$TAG"
        git tag -fa $TAG -m "move $TAG tag"
        git push origin $TAG --force

        TAG=${{ inputs.tag-prefix }}$MAJOR.$MINOR
        echo "TAG=$TAG"
        git tag -fa $TAG -m "move $TAG tag"
        git push origin $TAG --force
